@model TAhub.Models.TAModel
<div class="container">
    <h2 style="text-align:center;"><strong>Account Details</strong></h2>
    <hr />
    @using (Html.BeginForm("AccountDetails", "TA", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.StudentId)
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CourseAssignment)
        @Html.HiddenFor(model => model.CoursePreferences)
        @Html.HiddenFor(model => model.Messages)
        @Html.HiddenFor(model => model.WeeklySchedule)
        <table id="dataTable" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>
                        Update Information
                    </th>
                    <th>
                        <button id="edit-btn" type="button" class="btn btn-sm">
                            Edit Info
                        </button>
                        <button id="save-btn" type="submit" class="btn btn-sm" style="display: none;">
                            Save Changes
                        </button>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Html.DisplayName("First Name")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.FirstName)</span>
                        @Html.EditorFor(model => model.FirstName)
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @id = "fName-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Last Name")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.LastName)</span>
                        @Html.EditorFor(model => model.LastName)
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @id = "lName-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Email")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.Login.Username)</span>
                        @Html.EditorFor(model => model.Login.Username)
                        @Html.ValidationMessageFor(model => model.Login.Username, "", new { @id = "email-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Password")</td>
                    <td>
                        <span class="display">@Html.Raw("\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022")</span>
                        @Html.EditorFor(model => model.Login.Password, null, new { htmlAttributes = new { @type = "password" } })
                        @Html.ValidationMessageFor(model => model.Login.Password, "", new { @id = "password-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Major")</td>
                    <td>
                        <span class="display" id="display-major">@Html.DisplayFor(model => model.Major)</span>
                        @Html.EnumDropDownListFor(model => model.Major, null, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Major, "", new { @id = "major-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("GPA")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.GPA)</span>
                        @Html.EditorFor(model => model.GPA)
                        @Html.ValidationMessageFor(model => model.GPA, "", new { @id = "gpa-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Credits")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.Credits)</span>
                        @Html.EditorFor(model => model.Credits, new { htmlAttributes = new { @type = "number" } })
                        @Html.ValidationMessageFor(model => model.Credits, "", new { @id = "credits-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Gender")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.Gender)</span>
                        @Html.EnumDropDownListFor(model => model.Gender, null, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @id = "gender-validation", @class = "text-danger" })
                    </td>
                </tr>
                <tr>
                    <td>@Html.DisplayName("Lab")</td>
                    <td>
                        <span class="display">@Html.DisplayFor(model => model.Lab)</span>
                        @Html.EditorFor(model => model.Lab, new { htmlAttributes = new { @type = "number" } })
                        @Html.ValidationMessageFor(model => model.Lab, "", new { @id = "lab-validation", @class = "text-danger" })
                    </td>
                </tr>
            </tbody>
        </table>
        <!-- Trigger the modal with a button -->
        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteModal">Delete Account</button>
        <!-- Modal -->
        <div class="modal fade" id="deleteModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h3 class="modal-title">Are you sure you want to delete your account?</h3>
                        <small>Note that it might take a minute or two for your account to be completly erased from our system.</small>
                    </div>
                    <div class="modal-body" align="center">
                        @Html.ActionLink("Yes, Delete My Account", "DeleteAccount", "TA", new { Id = Model.Id }, new { @class = "btn btn-danger" })
                    </div>
                    <div class="modal-footer">
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<script type="text/javascript">
    $(function () {
        //Background Image
        $("body").css('background-image', 'url(@Url.Content("~/Images/BG_IMG_9.jpg"))');
        $("table input, table select").hide();
        $("#Major option[value='@Model.Major']").attr("active");
        $("#Gender option[value='@Model.Gender']").attr("active");
        $("#HasExperience option[value='@Model.HasExperience']").attr("active");
        var text = $("#display-major").text();
        $("#display-major").text(text.replace("_", " "));
        //Incase an Issue has occured in the backend while processing the users request
        var dangerText = '@Model.Notifications';
        var checkText = dangerText.replace(/[^A-Z0-9]/ig, "");
        if (checkText !== "") {
            $(".alert-danger h3").text(dangerText);
            $(".alert-danger").show();
        }
        validateInput();
    });
    $("#edit-btn").click(function (e) {
        e.preventDefault();
        $(this).hide();
        $("#save-btn").show();
        $("table input, table select").show();
        $(".display").hide();
    });
    //Initailizes the datatable on the page
    var InitializeDataTable = function () {
        var id = "#dataTable";
        $(id).DataTable({
            responsive: true,
            "paging": false,
            "ordering": false,
            "info": false
        });
        // Setup - add a text input to each footer cell
        $(id + ' tfoot th').each(function () {
            var title = $(this).text();
            if (title != "") {
                $(this).html('<input type="text" placeholder="Search ' + title + '" />');
            }
        });
        // DataTable
        var table = $(id).DataTable();
        // Apply the search
        table.columns().every(function () {
            var that = this;
            $('input', this.footer()).on('keyup change', function () {
                if (that.search() !== this.value) {
                    that.search(this.value).draw();
                }
            });
        });
    };
    //Validates all user Input to ensure they enter appropriate values for each input section
    var validateInput = function () {
        $("#save-btn").click(function (event) {
            var isValid = true;
            //Email Validation Variables
            var email = $("#Login_Username").val();
            var emailHtml = $("#email-validation");
            //Password Validation Variables
            var password = $("#Login_Password").val();
            var passwordHtml = $("#password-validation");
            //First Name Validation Variables
            var fName = $("#FirstName").val();
            var fNameHtml = $("#fName-validation");
            //Last Name Validation Variables
            var lName = $("#LastName").val();
            var lNameHtml = $("#lName-validation");
            //Student Id Validation Variables
            var id = $("#StudentId").val();
            var idHtml = $("#id-validation");
            //GPA Validation Variables
            var gpa = $("#GPA").val();
            var gpaHtml = $("#gpa-validation");
            //Gender Validation Variables
            var gender = $("#gender-dropdown").val();
            var genderHtml = $("#gender-validation");
            //Major Validation Variables
            var major = $("#major-dropdown").val();
            var majorHtml = $("#major-validation");
            //Experience Validation Variables
            var experience = $("#experience-dropdown").val();
            var experienceHtml = $("#experience-validation");
            //Credits Validation Variables
            var credits = $("#Credits").val();
            var creditsHtml = $("#credits-validation");
            //Lab Validation Variables
            var lab = $("#Lab").val();
            var labHtml = $("#lab-validation");
            //Sets the CSS values for the invalid input mesages displayed to the user
            $(".text-danger").css({
                    "font-weight": "bold",
                    "color": "firebrick",
                    "background-color": "rgba(255,255,255,.7)"
            });
            //Email Validation Conditional
            if (!email.includes("wsu.edu")) {
                isValid = false;
                emailHtml.text("Email must end with @@wsu.edu");
            }
            else {
                emailHtml.text("");
            }
            //Password Validation Conditional
            if (password.length < 8) {
                isValid = false;
                passwordHtml.text("Password must be at least 8 characters long");
            }
            else {
                passwordHtml.text("");
            }
            //First Name Validation Conditional
            if (fName === "") {
                isValid = false;
                fNameHtml.text("Your First Name must be provided");
            }
            else {
                fNameHtml.text("");
            }
            //Last Name Validation Conditional
            if (lName === "") {
                isValid = false;
                lNameHtml.text("Your Last Name must be provided");
            }
            else {
                lNameHtml.text("");
            }
            //Student Id Validation Conditional
            if (id.length !== 8 || parseInt(id, 10) === NaN) {
                isValid = false;
                idHtml.text("Student Id must be an 8 digit integer number");
            }
            else {
                idHtml.text("");
            }
            //GPA Validation Conditional
            var gpaNum = parseFloat(gpa);
            if (gpa.length > 4 || gpa.length < 3 || isNaN(gpaNum) || (gpaNum > 4.0 || gpaNum < 0.0)) {
                isValid = false;
                gpaHtml.text("GPA must be in decimal format and greater than or equal to 0.0 and no larger that 4.0");
            }
            else {
                gpaHtml.text("");
            }
            //Gender Validation Conditional
            if (gender === null) {
                isValid = false;
                genderHtml.text("Please select an option from the drop down");
            }
            else {
                genderHtml.text("");
            }
            //Major Validation Conditional
            if (major === null) {
                isValid = false;
                majorHtml.text("Please select an option from the drop down");
            }
            else {
                majorHtml.text("");
            }
            //Experience Validation Conditional
            if (experience === null) {
                isValid = false;
                experienceHtml.text("Please select an option from the drop down");
            }
            else {
                experienceHtml.text("");
            }
            //Credits Validation Conditional
            var credsNum = parseInt(credits);
            if (credsNum <= 0) {
                isValid = false;
                creditsHtml.text("Please insert a positive number");
            }
            else {
                creditsHtml.text("");
            }
            //Lab Validation Conditional
            var labNum = parseInt(lab);
            if (labNum < 0) {
                isValid = false;
                labHtml.text("Please insert a positive number");
            }
            else {
                labHtml.text("");
            }
            //If any of the above inputs had an invalid value entered, this conditional is triggered
            if (!isValid) {
                //Prevents the submit button from "Submitting" the form as it was intended to do
                event.preventDefault();
            }
        })
    };
</script>
<style type="text/css">
    table {
        font-weight: bold;
        background-color: rgba(255, 255, 255, 0.8);
    }

    .btn {
        font-weight: bold;
        margin: auto;
        padding: 5px;
        color: white !important;
    }

    #save-btn {
        background-color: cornflowerblue !important;
    }

    #edit-btn {
        background-color: mediumseagreen !important;
    }

    .btn:hover {
        opacity: .6;
    }

    .form-group {
    }
</style>